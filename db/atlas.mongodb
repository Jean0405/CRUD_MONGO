const { ObjectId } = require("mongodb");

//SE CREA COLECCIÓN DE SUCURSAL
use("practica_mongo");
db.createCollection("sucursal", {
  capped: true,
  size: 1000,
  max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "sucursal",
      required: ["nombre", "direccion", "telefono"],
      properties: {
        nombre: {
          bsonType: "string",
        },
        direccion: {
          bsonType: "string",
        },
        telefono: {
          bsonType: "string",
          pattern: "^[0-9]{10}$",
        },
      },
    },
  },
});

//SE CREA COLECCIÓN DE AUTOMOVIL
use("practica_mongo");
db.createCollection("automovil", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "automovil",
      required: [
        "marca",
        "modelo",
        "anio",
        "tipo",
        "capacidad",
        "precio_diario",
      ],
      properties: {
        marca: {
          bsonType: "string",
        },
        modelo: {
          bsonType: "string",
        },
        anio: {
          bsonType: "int",
          minimum: 2000,
          maximum: 2070,
        },
        tipo: {
          bsonType: "string",
          enum: ["Combustible", "Electrico"],
        },
        capacidad: { bsonType: "int" },
        precio_diario: { bsonType: "number" },
      },
    },
  },
});

//SE CREA LA COLECCIÓN PARA SURCURSAL AUTOMOVIL
use("practica_mongo");
db.createCollection("sucursal_automovil", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "automovil",
      required: ["ID_sucursal", "ID_automovil", "cantidad_disponible"],
      properties: {
        ID_sucursal: {
          bsonType: "objectId",
        },
        ID_automovil: {
          bsonType: "objectId",
        },
        cantidad_disponible: {
          bsonType: "int",
        },
      },
    },
  },
});

use("practica_mongo");
db.createCollection("reserva", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "reserva",
      required: [
        "ID_cliente",
        "ID_automovil",
        "fecha_reserva",
        "fecha_inicio",
        "fecha_fin",
        "estado",
      ],
      properties: {
        ID_cliente: {
          bsonType: "int",
        },
        ID_automovil: {
          bsonType: "objectId",
        },
        fecha_reserva: {
          bsonType: "string",
        },
        fecha_inicio: {
          bsonType: "string",
        },
        fecha_fin: {
          bsonType: "string",
        },
        estado: {
          bsonType: "string",
        },
      },
    },
  },
});

use("practica_mongo");
db.createCollection("cliente", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "reserva",
      required: ["nombre", "apellido", "DNI", "direccion", "telefono", "email"],
      properties: {
        nombre: {
          bsonType: "string",
        },
        apellido: {
          bsonType: "string",
        },
        DNI: {
          bsonType: "int",
        },
        direccion: {
          bsonType: "string",
        },
        telefono: {
          bsonType: "string",
        },
        email: {
          bsonType: "string",
          pattern: "^[a-zA-Z0-9.]+@",
        },
      },
    },
  },
});

use("practica_mongo");
db.createCollection("alquiler", {
  capped: true,
  size: 1200,
  max: 5,
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "alquiler",
      required: [
        "ID_cliente",
        "ID_automovil",
        "fecha_inicio",
        "fecha_fin",
        "costo_total",
        "estado",
      ],
      properties: {
        ID_cliente: {
          bsonType: "int",
        },
        ID_automovil: {
          bsonType: "objectId",
        },
        fecha_inicio: {
          bsonType: "string",
          maxLength: 10,
        },
        fecha_fin: {
          bsonType: "string",
          maxLength: 10,
        },
        costo_total: {
          bsonType: "number",
        },
        estado: {
          bsonType: "string",
        },
      },
    },
  },
});

use("practica_mongo");
db.createCollection("registro_devolucion", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "registro_devolucion",
      required: [
        "ID_alquiler",
        "ID_empleado",
        "fecha_devolucion",
        "combustible_entregado",
        "kilometraje_entregado",
      ],
      properties: {
        ID_alquiler: {
          bsonType: "objectId",
          description: "ID_alquiler no es valido",
        },
        ID_empleado: {
          bsonType: "int",
          description: "ID_empleado no es valido",
        },
        fecha_devolucion: {
          bsonType: "string",
          description: "fecha_devolucion no es valido",
        },
        combustible_entregado: {
          bsonType: "number",
          description: "combustible_entregado no es valido",
        },
        kilometraje_entregado: {
          bsonType: "number",
          description: "kilometraje_entregado no es valido",
        },
      },
    },
  },
});
use("practica_mongo");
db.createCollection("empleado", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "empleado",
      required: ["nombre", "apellido", "DNI", "direccion", "telefono", "cargo"],
      properties: {
        nombre: {
          bsonType: "string",
          description: "nombre no es valido",
        },
        apellido: {
          bsonType: "string",
          description: "apellido no es valido",
        },
        DNI: {
          bsonType: "int",
          minimum: 1000000000,
          maximum: 9999999999,
          description: "DNI no es valido",
        },
        direccion: {
          bsonType: "string",
          description: "direccion no es valido",
        },
        telefono: {
          bsonType: "string",
          description: "telefono no es valido",
        },
        cargo: {
          bsonType: "string",
          enum: ["GERENTE", "VENDEDOR", "ASISTENTE"],
          description: "cargo no es valido",
        },
      },
    },
  },
});

// INGRESO SUCURSAL
use("practica_mongo");
db.sucursal.insertOne({
  nombre: "Zona Franca",
  direccion: "Calle 25",
  telefono: "3004097111",
});

use("practica_mongo");
db.sucursal.insertOne({
  nombre: "Zona Central",
  direccion: "Calle 27",
  telefono: "3004097917",
});

//INGRESO AUTOMOVIL
use("practica_mongo");
db.automovil.insertOne({
  marca: "Audi",
  modelo: "Serie S",
  anio: 2023,
  tipo: "Combustible",
  capacidad: 5,
  precio_diario: 250.45,
});

use("practica_mongo");
db.automovil.insertOne({
  marca: "Ferrari",
  modelo: "2024",
  anio: 2023,
  tipo: "Combustible",
  capacidad: 2,
  precio_diario: 2500.0,
});

use("practica_mongo");
db.automovil.insertOne({
  marca: "Ford",
  modelo: "Fiesta",
  anio: 2018,
  tipo: "Combustible",
  capacidad: 4,
  precio_diario: 340.0,
});

use("practica_mongo");
db.automovil.insertOne({
  marca: "Chevrolet",
  modelo: "Camaro",
  anio: 2015,
  tipo: "Combustible",
  capacidad: 2,
  precio_diario: 3400.0,
});

//INGRESO SUCURSAL_AUTOMOVIL
use("practica_mongo");
db.sucursal_automovil.insertOne({
  ID_sucursal: ObjectId("64d15917adaeb5caaae90796"),
  ID_automovil: ObjectId("64d1595ee8565748d24644d9"),
  cantidad_disponible: 5,
});

use("practica_mongo");
db.sucursal_automovil.insertOne({
  ID_sucursal: ObjectId("64d15922c7da16c3cc740887"),
  ID_automovil: ObjectId("64d15967f8e5fe62542e2adc"),
  cantidad_disponible: 1,
});

use("practica_mongo");
db.sucursal_automovil.insertOne({
  ID_sucursal: ObjectId("64d15922c7da16c3cc740887"),
  ID_automovil: ObjectId("64d15dd2b3de4e834d89b66f"),
  cantidad_disponible: 7,
});

use("practica_mongo");
db.sucursal_automovil.insertOne({
  ID_sucursal: ObjectId("64d15917adaeb5caaae90796"),
  ID_automovil: ObjectId("64d15e48864bd00510f6ad16"),
  cantidad_disponible: 7,
});

//INGRESO RESERVAS
use("practica_mongo");
db.reserva.insertOne({
  ID_cliente: 1005111222,
  ID_automovil: ObjectId("64d1595ee8565748d24644d9"),
  fecha_reserva: "2023-11-16",
  fecha_inicio: "2023-11-26",
  fecha_fin: "2023-12-20",
  estado: "PENDIENTE",
});

use("practica_mongo");
db.reserva.insertOne({
  ID_cliente: 1005111222,
  ID_automovil: ObjectId("64d15e48864bd00510f6ad16"),
  fecha_reserva: "2022-02-10",
  fecha_inicio: "2022-02-16",
  fecha_fin: "2022-10-20",
  estado: "PENDIENTE",
});

use("practica_mongo");
db.cliente.insertOne({
  nombre: "Sara",
  apellido: "Angarita",
  DNI: 1005281402,
  direccion: "Monterredondo calle 86",
  telefono: "3224097916",
  email: "sara@gmail.com",
});
use("practica_mongo");
db.cliente.insertOne({
  nombre: "Jean",
  apellido: "Angarita",
  DNI: 1005281402,
  direccion: "Monterredondo calle 80",
  telefono: "3224097916",
  email: "jean@gmail.com",
});

//INGRESO DE ALQUILER
use("practica_mongo");
db.alquiler.insertOne({
  ID_cliente: 1005281402,
  ID_automovil: ObjectId("64d15967f8e5fe62542e2adc"),
  fecha_inicio: "2023-11-23",
  fecha_fin: "2023-11-25",
  costo_total: 8500,
  estado: "ACTIVO",
});

use("practica_mongo");
db.alquiler.insertOne({
  ID_cliente: 1005281401,
  ID_automovil: ObjectId("64d15967f8e5fe62542e2adc"),
  fecha_inicio: "2023-11-23",
  fecha_fin: "2023-11-25",
  costo_total: 8500,
  estado: "ACTIVO",
});

use("practica_mongo");
db.alquiler.insertOne({
  ID_cliente: 1005281401,
  ID_automovil: ObjectId("64d15967f8e5fe62542e2adc"),
  fecha_inicio: "2023-11-23",
  fecha_fin: "2023-11-25",
  costo_total: 8500,
  estado: "DISṔONIBLE",
});

use("practica_mongo");
db.alquiler.insertOne({
  ID_cliente: 1005281402,
  ID_automovil: ObjectId("64d15dd2b3de4e834d89b66f"),
  fecha_inicio: "2023-11-23",
  fecha_fin: "2023-11-25",
  costo_total: 800,
  estado: "INACTIVO",
});

use("practica_mongo");
db.alquiler.insertOne({
  ID_cliente: 1005281401,
  ID_automovil: ObjectId("64d15e48864bd00510f6ad16"),
  fecha_inicio: "2023-11-23",
  fecha_fin: "2023-11-25",
  costo_total: 85000,
  estado: "DISPONIBLE",
});

use("practica_mongo");
db.alquiler.insertOne({
  ID_cliente: 1005281402,
  ID_automovil: ObjectId("64d15e48864bd00510f6ad16"),
  fecha_inicio: "2023-10-23",
  fecha_fin: "2023-11-31",
  costo_total: 10,
  estado: "DISPONIBLE",
});

// INGRESO REGISTRO DE DEVOLUCIÓN
use("practica_mongo");
db.registro_devolucion.insertOne({
  ID_alquiler: ObjectId("64d15967f8e5fe62542e2adc"),
  ID_empleado: 1005371571,
  fecha_devolucion: "2023-11-26",
  combustible_entregado: 4.5,
  kilometraje_entregado: 35.6,
});

//INGRESO DE EMPLEADOS
use("practica_mongo");
db.empleado.insertOne({
  nombre: "Jonathan",
  apellido: "Alvarez",
  DNI: 1005222334,
  direccion: "La Victoria",
  telefono: "300756231",
  cargo: "GERENTE",
});

use("practica_mongo");
db.empleado.insertOne({
  nombre: "Akio",
  apellido: "Diaz",
  DNI: 1005371571,
  direccion: "Barrio Mutis",
  telefono: "3224097916",
  cargo: "VENDEDOR",
});

//EJEMPLO GTE (mayor o igual)
use("practica_mongo");
db.registro_devolucion.find({ kilometraje_entregado: { $gte: 31000 } });
//EJEMPLO EQ (igual)
use("practica_mongo");
db.registro_devolucion.find({ kilometraje_entregado: { $eq: 35000 } });

//EJEMPLO RELACIONAR 3 COLLECTIONS
use("practica_mongo");
db.getCollection("sucursal_automovil").aggregate([
  {
    $match: { _id: 1 },
  },
  {
    $lookup: {
      from: "sucursal",
      localField: "ID_sucursal",
      foreignField: "_id",
      as: "automoviles_relacionados_fk",
    },
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "detalles automoviles",
    },
  },
]);

//CONSULTAS DE PRACTICA

//2. Listar todos los clientes
use("practica_mongo");
db.cliente.find();

//3. Listar los automoviles disponibles
use("practica_mongo");
db.getCollection("alquiler").aggregate([
  {
    $match: { estado: "DISPONIBLE" },
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "Automoviles disponibles",
    },
  },
  {
    $project: {
      ID_automovil: 0,
    },
  },
]);

//4. Listar los alquiler activos
use("practica_mongo");
db.getCollection("cliente").aggregate([
  {
    $lookup: {
      from: "alquiler",
      localField: "DNI",
      foreignField: "ID_cliente",
      as: "Alquiler_activo",
    },
  },

  {
    $unwind: "$Alquiler_activo",
  },
  {
    $match: { "Alquiler_activo.estado": { $eq: "ACTIVO" } },
  },
  {
    $project: {
      ID_cliente: 0,
      "Alquiler_activo.ID_cliente": 0,
    },
  },
  {
    $group: {
      _id: "$_id",
      nombre: {
        $first: "$nombre",
      },
      apellido: {
        $first: "$apellido",
      },
      DNI: {
        $first: "$DNI",
      },
      telefono: {
        $first: "$telefono",
      },
      Alquiler_activo: { $push: "$Alquiler_activo" },
    },
  },
]);

// 5. Mostrar todas las reservas pendientes con los datos del cliente y el automovil reservado
use("practica_mongo");
db.getCollection("reserva").aggregate([
  {
    $lookup: {
      from: "cliente",
      localField: "ID_cliente",
      foreignField: "DNI",
      as: "clientes",
    },
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "automoviles",
    },
  },
  {
    $match: { estado: "PENDIENTE" },
  },
  {
    $group: {
      _id: "$_id",
      DNI_cliente: {
        $first: "$ID_cliente",
      },
      fecha_reserva: {
        $first: "$fecha_reserva",
      },
      fecha_inicio: {
        $first: "$fecha_inicio",
      },
      fecha_fin: {
        $first: "$fecha_fin",
      },
      estado: {
        $first: "$estado",
      },
      detalles_cliente: { $push: "$clientes" },
      detalles_automoviles: { $push: "$automoviles" },
    },
  },
]);

// 6. Obtener los detalles del alquiler mediante ID especifico
use("practica_mongo");
db.alquiler.find({ _id: 2 });

// 7. Obtener los empleados con el cargo de VENDEDOR
use("practica_mongo");
db.empleado.find({ cargo: "VENDEDOR" });

//8. Obtener los automoviles disponibles en cada sucursal
use("practica_mongo");
db.getCollection("sucursal_automovil").aggregate([
  {
    $lookup: {
      from: "sucursal",
      localField: "ID_sucursal",
      foreignField: "_id",
      as: "sucursal_info",
    },
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "automovil_info",
    },
  },

  {
    $unwind: "$sucursal_info",
    $unwind: "$automovil_info",
  },
  {
    $project: {
      ID_sucursal: "$ID_sucursal",
      cantidad_disponible: "$cantidad_disponible",
    },
  },
  {
    $group: {
      _id: "$ID_sucursal",
      cantidad_total_automoviles: { $sum: "$cantidad_disponible" },
    },
  },
]);

// 9.  obtener el costo de un alquiler especifico
use("practica_mongo");
db.alquiler.find(
  { _id: ObjectId("64d23e7bbedd3859cc3a27dd") },
  { costo_total: 1 }
);

// 10.  Listar clientes con ID especifico
use("practica_mongo");
db.cliente.find({ _id: 1005184201 });

// 11.  Listar vehiculos con capacidad de 5 o más
use("practica_mongo");
db.automovil.find({ capacidad: { $gte: 5 } });

// 12.  Listar alquiler por fecha especifica
use("practica_mongo");
db.alquiler.find({ fecha_inicio: "2023-10-23" });

// 13.  Listar las reservas pendientes de un cliente especifico
use("practica_mongo");
db.getCollection("reserva").aggregate([
  {
    $match: {
      ID_cliente: 1005184201,
      estado: "PENDIENTE",
    },
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_cliente",
      foreignField: "DNI",
      as: "cliente_info",
    },
  },
  {
    $unwind: "$cliente_info",
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "automovil_info",
    },
  },
  {
    $unwind: "$automovil_info",
  },
  // {
  //   $project: {
  //     "cliente_info.ID_cliente": 0,
  //     "automovil_info.ID_automovil": 0,
  //   },
  // },
  {
    $group: {
      _id: "$_id",
      fecha_inicio: { $first: "$fecha_inicio" },
      fecha_fin: { $first: "$fecha_fin" },
      estado: { $first: "$estado" },
      cliente_info: { $push: "$cliente_info" },
      automovil_info: { $push: "$automovil_info" },
    },
  },
]);

/* 14.Mostrar los empleados con cargo de "Gerente" o "Asistente". */
use("practica_mongo");
db.empleado.find({
  cargo: { $in: ["GERENTE", "ASISTENTE"] },
});

/* 15.Obtener los datos de los clientes que realizaron al menos un
alquiler. */
use("practica_mongo");
db.cliente.aggregate([
  {
    $lookup: {
      from: "alquiler",
      localField: "_id",
      foreignField: "ID_cliente",
      as: "alquiler_info",
    },
  },
  {
    $match: { alquiler_info: { $ne: [] } },
  },
  {
    $project: {
      "alquiler_info.ID_cliente": 0,
      "alquiler_info.ID_automovil": 0,
      "alquiler_info.fecha_inicio": 0,
      "alquiler_info.fecha_fin": 0,
    },
  },
  {
    $group: {
      _id: "$_id",
      nombre: { $first: "$nombre" },
      apellido: { $first: "$apellido" },
      telefono: { $first: "$telefono" },
      email: { $first: "$email" },
      alguiler_info: {
        $push: "$alquiler_info",
      },
    },
  },
]);

// 16.Listar todos los automóviles ordenados por marca y modelo.
use("practica_mongo");
db.automovil.find().sort({
  marca: 1,
  modelo: -1,
});

// 17.Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección
use("practica_mongo");
db.getCollection("sucursal_automovil").aggregate([
  {
    $lookup: {
      from: "sucursal",
      localField: "ID_sucursal",
      foreignField: "_id",
      as: "sucursal_info",
    },
  },

  {
    $unwind: "$sucursal_info",
  },
  {
    $group: {
      _id: "$ID_sucursal",
      cantidad_total_automoviles: { $sum: "$cantidad_disponible" },
      direccion: { $first: "$sucursal_info.direccion" },
    },
  },
]);

// 18. Obtener la cantidad total de alquileres de la base de datos.
use("practica_mongo");
db.alquiler.countDocuments({});

// 19.Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles.
use("practica_mongo");
db.alquiler.aggregate([
  {
    $lookup: {
      from: "automovil",
      localField: "ID_automovil",
      foreignField: "_id",
      as: "Alquiler_Info",
    },
  },
  {
    $match: {
      estado: "INACTIVO",
      "Alquiler_Info.capacidad": { $gte: 2 },
    },
  },
  {
    $project: {
      _id: 1,
      "Alquiler_Info.ID_automovil": 1,
      "Alquiler_Info.marca": 1,
      "Alquiler_Info.modelo": 1,
      "Alquiler_Info.anio": 1,
      "Alquiler_Info.tipo": 1,
      "Alquiler_Info.capacidad": 1,
      "Alquiler_Info.precio_diario": 1,
      estado: 1,
    },
  },
]);

// 20.Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'.
use("practica_mongo");
db.alquiler.find({ fecha_inicio: { $gte: "2023-10-23", $lte: "2023-11-23" } });
